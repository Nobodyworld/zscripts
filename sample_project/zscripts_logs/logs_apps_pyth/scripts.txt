# scripts

# scripts\manage_db.py
#!/usr/bin/env python3
"""
Database management script for Task Management System.
Handles migrations, seeding, and database operations.
"""

import argparse
import sys
from pathlib import Path

# Add backend directory to path
backend_dir = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_dir))

try:
    from models import Task, Project, User
    from service import TaskService
except ImportError as e:
    print(f"Error importing backend modules: {e}")
    print("Make sure you're running this from the scripts directory")
    sys.exit(1)


class DatabaseManager:
    """Manages database operations for the Task Management System."""

    def __init__(self, service: TaskService):
        self.service = service

    def create_tables(self) -> None:
        """Create database tables (simplified for in-memory storage)."""
        print("Creating database tables...")
        # In a real implementation, this would create actual database tables
        print("Tables created successfully.")

    def drop_tables(self) -> None:
        """Drop database tables."""
        print("Dropping database tables...")
        # Reset in-memory storage
        self.service.tasks.clear()
        self.service.projects.clear()
        self.service.users.clear()
        print("Tables dropped successfully.")

    def migrate(self, direction: str = "up") -> None:
        """Run database migrations."""
        if direction == "up":
            print("Running migrations up...")
            # In a real implementation, this would run actual migrations
            print("Migrations completed successfully.")
        elif direction == "down":
            print("Running migrations down...")
            print("Migrations rolled back successfully.")
        else:
            raise ValueError(f"Invalid migration direction: {direction}")

    def seed(self) -> None:
        """Seed database with sample data."""
        print("Seeding database with sample data...")

        # Create sample users
        user1 = self.service.add_user("Alice Johnson", "alice@example.com")
        user2 = self.service.add_user("Bob Smith", "bob@example.com")
        user3 = self.service.add_user("Carol Williams", "carol@example.com")

        # Create sample projects
        project1 = self.service.create_project(
            "Task Management System",
            "A comprehensive task and project management application"
        )
        project2 = self.service.create_project(
            "API Development",
            "RESTful API development for backend services"
        )

        # Create sample tasks
        task1 = self.service.create_task(
            "Implement user authentication",
            "Add login/logout functionality with JWT tokens",
            project1.id,
            "high"
        )
        self.service.assign_task(task1.id, user1.id)

        task2 = self.service.create_task(
            "Design database schema",
            "Create ER diagram and define table relationships",
            project1.id,
            "medium"
        )
        self.service.assign_task(task2.id, user2.id)

        task3 = self.service.create_task(
            "Create API endpoints",
            "Implement CRUD operations for tasks and projects",
            project2.id,
            "high"
        )
        self.service.assign_task(task3.id, user3.id)

        task4 = self.service.create_task(
            "Add input validation",
            "Implement comprehensive input validation and error handling",
            project2.id,
            "medium"
        )

        # Mark some tasks as complete
        self.service.mark_task_complete(task2.id)

        print(f"Created {len(self.service.users)} users")
        print(f"Created {len(self.service.projects)} projects")
        print(f"Created {len(self.service.tasks)} tasks")
        print("Database seeded successfully.")

    def reset(self) -> None:
        """Reset database to clean state."""
        print("Resetting database...")
        self.drop_tables()
        self.create_tables()
        print("Database reset successfully.")

    def status(self) -> None:
        """Show database status and statistics."""
        print("Database Status")
        print("=" * 50)
        print(f"Users: {len(self.service.users)}")
        print(f"Projects: {len(self.service.projects)}")
        print(f"Tasks: {len(self.service.tasks)}")

        # Show task status breakdown
        total_tasks = len(self.service.tasks)
        if total_tasks > 0:
            todo_count = sum(1 for t in self.service.tasks.values() if t.status == "todo")
            in_progress_count = sum(1 for t in self.service.tasks.values() if t.status == "in_progress")
            done_count = sum(1 for t in self.service.tasks.values() if t.status == "done")

            print("\nTask Status Breakdown:")
            print(f"  To Do: {todo_count} ({todo_count/total_tasks*100:.1f}%)")
            print(f"  In Progress: {in_progress_count} ({in_progress_count/total_tasks*100:.1f}%)")
            print(f"  Done: {done_count} ({done_count/total_tasks*100:.1f}%)")

        # Show recent tasks
        if self.service.tasks:
            print("\nRecent Tasks:")
            recent_tasks = sorted(
                self.service.tasks.values(),
                key=lambda t: t.created_at,
                reverse=True
            )[:5]

            for task in recent_tasks:
                assignee = self.service.users.get(task.assignee_id).username if task.assignee_id and task.assignee_id in self.service.users else "Unassigned"
                print(f"  - {task.title} ({task.status}) - {assignee}")


def main():
    """Main entry point for database management script."""
    parser = argparse.ArgumentParser(
        description="Database management for Task Management System"
    )
    parser.add_argument(
        "command",
        choices=["create", "drop", "migrate", "seed", "reset", "status"],
        help="Database command to execute"
    )
    parser.add_argument(
        "--direction",
        choices=["up", "down"],
        default="up",
        help="Migration direction (default: up)"
    )

    args = parser.parse_args()

    # Initialize service
    service = TaskService()
    manager = DatabaseManager(service)

    try:
        if args.command == "create":
            manager.create_tables()
        elif args.command == "drop":
            manager.drop_tables()
        elif args.command == "migrate":
            manager.migrate(args.direction)
        elif args.command == "seed":
            manager.seed()
        elif args.command == "reset":
            manager.reset()
        elif args.command == "status":
            manager.status()

        print(f"Command '{args.command}' executed successfully.")

    except Exception as e:
        print(f"Error executing command '{args.command}': {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
