name: Task Management System CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Code quality and testing
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - component: backend
            language: python
          - component: frontend
            language: javascript
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'sample_project/${{ matrix.component }}/package-lock.json'

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          cd sample_project/${{ matrix.component }}
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        if: matrix.language == 'javascript'
        run: |
          cd sample_project/${{ matrix.component }}
          npm ci

      - name: Run linting
        if: matrix.language == 'python'
        run: |
          cd sample_project/${{ matrix.component }}
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run linting
        if: matrix.language == 'javascript'
        run: |
          cd sample_project/${{ matrix.component }}
          npm run lint

      - name: Run tests
        if: matrix.language == 'python'
        run: |
          cd sample_project/${{ matrix.component }}
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml

      - name: Run tests
        if: matrix.language == 'javascript'
        run: |
          cd sample_project/${{ matrix.component }}
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage

  # Build and package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example: kubectl apply -f k8s/staging/ or serverless deploy --stage staging

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here
          # curl -f https://staging-api.example.com/health || exit 1

      - name: Notify deployment
        if: always()
        run: |
          echo "Staging deployment completed with status: ${{ job.status }}"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # kubectl apply -f k8s/production/ or serverless deploy --stage prod

      - name: Run production smoke tests
        run: |
          echo "Running smoke tests against production..."
          # curl -f https://api.example.com/health || exit 1

      - name: Create release
        if: success()
        run: |
          echo "Creating GitHub release..."
          # gh release create ${{ github.sha }} --generate-notes

      - name: Notify production deployment
        if: always()
        run: |
          echo "Production deployment completed with status: ${{ job.status }}"

  # Documentation deployment
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate documentation with zscripts
        run: |
          python -m zscripts collect --types all --output-dir docs/
          python -m zscripts consolidate --types python --output docs/api-docs.md

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
