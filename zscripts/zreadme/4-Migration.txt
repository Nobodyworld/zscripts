## Migrating from the Django Scripts

If you previously relied on `config.py` constants and Django-specific
terminology, you can reproduce the same behaviour with the new configuration and
CLI.

1. **Reuse the existing skip list** – Copy the `skip` array from
   `zscripts.config.json` into your project and append any app-specific
   directories. This mirrors the old `SKIP_DIRS` value.
2. **Carry over file type buckets** – The old `FILE_TYPES` dictionary mapped
   Django module names to log categories. You can paste those mappings directly
   into the `file_types` section so consolidated reports continue to separate
   `models.py`, `views.py`, etc.
3. **Generate logs** – To match the previous `python zscripts/all/app_all_types.py`
   invocation, run:

   ```bash
   python -m zscripts collect --types python_html --project-root path/to/your/project
   ```

   This walks every Django app directory and produces log files in the location
   defined by `collection_logs.python_html`.
4. **Capture single-file summaries** – The `consolidate` subcommand is a drop-in
   replacement for the legacy `single_*.py` scripts. For example:

   ```bash
   python -m zscripts consolidate --types python --project-root path/to/your/project
   ```

   writes to the same `capture_all_pyth.txt` path used by the earlier scripts.

Because the CLI reads JSON, you can keep multiple configuration files around for
different frameworks (e.g., `zscripts.config.django.json` vs.
`zscripts.config.node.json`) and swap between them with the `--config` flag.
