## Configuration

The runtime configuration now lives in a standalone JSON document instead of a
Python module. By default, `python -m zscripts` loads `zscripts.config.json` from
the repository root. The schema is intentionally simple so it can be tracked in
source control or generated dynamically:

```jsonc
{
  "skip": ["node_modules", "venv", "dist"],
  "file_types": {
    "models.py": "models_files",
    "views.py": "views_files"
  },
  "directories": {
    "log_root": "logs",
    "build": "build_files",
    "analysis": "analysis_logs",
    "consolidation": "consoli_files",
    "work": "logs_files"
  },
  "collection_logs": {
    "python": "logs_apps_pyth",
    "all": "logs_apps_all"
  },
  "single_targets": {
    "python": "capture_all_pyth.txt",
    "any": "capture_all.txt"
  }
}
```

Every path is resolved relative to the `zscripts/` package directory, so the
example above stores aggregated logs under `zscripts/logs/`. You can provide a
custom configuration file via the `--config` flag on any CLI command. The module
`zscripts.config` exposes helpers (`load_config`, `get_config`, and constants such
as `LOG_DIR`) for scripts that want to introspect the parsed settings.
