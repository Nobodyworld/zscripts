backend/
    service.py
"""Minimal backend service illustrating how zscripts can summarize Python code."""
from __future__ import annotations

from dataclasses import dataclass
from typing import Dict, List


@dataclass
class Task:
    """Simple task model used by the example service."""

    name: str
    completed: bool = False


class TaskService:
    """Stores tasks in memory and exposes CRUD-style helpers."""

    def __init__(self) -> None:
        self._tasks: Dict[str, Task] = {}

    def create(self, name: str) -> Task:
        task = Task(name=name)
        self._tasks[name] = task
        return task

    def list(self) -> List[Task]:
        return list(self._tasks.values())

    def mark_complete(self, name: str) -> Task:
        task = self._tasks[name]
        task.completed = True
        return task


if __name__ == "__main__":
    service = TaskService()
    service.create("document configuration format")
    service.create("demo multi-stack scanning")
    for task in service.list():
        print(f"- {task.name}: {'done' if task.completed else 'pending'}")

...
