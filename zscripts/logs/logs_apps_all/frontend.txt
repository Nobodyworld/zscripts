# frontend

# frontend/App.cjs
module.exports = {
  sampleGreeting() {
    return 'hello from cjs';
  },
};


# frontend/App.css
/* Modern CSS for the Task Management System */
.app {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f8fafc;
  min-height: 100vh;
}

.header {
  text-align: center;
  margin-bottom: 40px;
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.header h1 {
  margin: 0 0 10px 0;
  font-size: 2.5rem;
  font-weight: 700;
}

.header p {
  margin: 0;
  font-size: 1.1rem;
  opacity: 0.9;
}

.content {
  display: grid;
  gap: 30px;
}

.projects-section h2,
.tasks-section h2 {
  color: #1f2937;
  margin-bottom: 20px;
  font-size: 1.8rem;
  font-weight: 600;
}

.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}

.project-card {
  background: white;
  padding: 24px;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
  transition: transform 0.2s, box-shadow 0.2s;
}

.project-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.project-card h3 {
  margin: 0 0 12px 0;
  color: #1f2937;
  font-size: 1.3rem;
  font-weight: 600;
}

.project-card p {
  color: #6b7280;
  margin: 0 0 16px 0;
  line-height: 1.5;
}

.project-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 12px;
}

.tag {
  background: #e0e7ff;
  color: #3730a3;
  padding: 4px 8px;
  border-radius: 6px;
  font-size: 0.8rem;
  font-weight: 500;
}

.status {
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-active {
  background: #d1fae5;
  color: #065f46;
}

.status-completed {
  background: #dbeafe;
  color: #1e40af;
}

.status-archived {
  background: #f3f4f6;
  color: #6b7280;
}

.tasks-section {
  background: white;
  padding: 24px;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
}

.tasks-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 24px;
  gap: 20px;
}

.tasks-header h2 {
  margin: 0;
  flex-shrink: 0;
}

.task-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
  min-width: 300px;
}

.task-form input,
.task-form textarea,
.task-form button {
  padding: 12px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 1rem;
}

.task-form input:focus,
.task-form textarea:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.task-form button {
  background: #667eea;
  color: white;
  border: none;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.2s;
}

.task-form button:hover {
  background: #5a67d8;
}

.task-form textarea {
  resize: vertical;
  min-height: 60px;
}

.tasks-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 20px;
}

.task-card {
  background: #f9fafb;
  padding: 20px;
  border-radius: 12px;
  border: 1px solid #e5e7eb;
  transition: transform 0.2s, box-shadow 0.2s;
}

.task-card:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.task-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 12px;
  gap: 12px;
}

.task-header h3 {
  margin: 0;
  color: #1f2937;
  font-size: 1.1rem;
  font-weight: 600;
  flex: 1;
}

.priority-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  color: white;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  flex-shrink: 0;
}

.task-description {
  color: #6b7280;
  margin: 0 0 16px 0;
  line-height: 1.5;
  font-size: 0.9rem;
}

.task-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 12px;
}

.task-footer select {
  padding: 6px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.85rem;
  font-weight: 500;
  cursor: pointer;
  min-width: 120px;
}

.task-footer select:focus {
  outline: none;
  border-color: #667eea;
}

.task-date {
  color: #9ca3af;
  font-size: 0.8rem;
  font-weight: 500;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  font-size: 1.2rem;
  color: #6b7280;
}

/* Responsive design */
@media (max-width: 768px) {
  .app {
    padding: 10px;
  }

  .header h1 {
    font-size: 2rem;
  }

  .tasks-header {
    flex-direction: column;
    align-items: stretch;
  }

  .task-form {
    min-width: auto;
  }

  .tasks-grid {
    grid-template-columns: 1fr;
  }

  .projects-grid {
    grid-template-columns: 1fr;
  }
}

# frontend/App.cts
export const config = { format: 'cts' };


# frontend/App.js
// Vanilla JS entry point
console.log('sample project js');


# frontend/App.jsx
// Comprehensive React task management application demonstrating modern patterns
import React, { useState, useEffect } from 'react';
import './App.css';

/**
 * @typedef {Object} Task
 * @property {string} id
 * @property {string} title
 * @property {string} description
 * @property {'todo' | 'in_progress' | 'done'} status
 * @property {'low' | 'medium' | 'high'} priority
 * @property {string} [assignee_id]
 * @property {string} project_id
 * @property {string} created_at
 * @property {string} updated_at
 */

/**
 * @typedef {Object} Project
 * @property {string} id
 * @property {string} name
 * @property {string} description
 * @property {'active' | 'completed' | 'archived'} status
 * @property {string[]} tags
 * @property {string} created_at
 */

function App() {
  const [tasks, setTasks] = useState([]);
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState('');
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newTaskDescription, setNewTaskDescription] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      // Mock API calls - in real app these would fetch from backend
      const mockTasks = [
        {
          id: '1',
          title: 'Implement user authentication',
          description: 'Add login/logout functionality with JWT tokens',
          status: 'in_progress',
          priority: 'high',
          project_id: '1',
          created_at: '2024-01-15T10:00:00Z',
          updated_at: '2024-01-16T14:30:00Z',
        },
        {
          id: '2',
          title: 'Design database schema',
          description: 'Create ER diagram and define table relationships',
          status: 'done',
          priority: 'medium',
          project_id: '1',
          created_at: '2024-01-10T09:00:00Z',
          updated_at: '2024-01-12T16:45:00Z',
        },
      ];

      const mockProjects = [
        {
          id: '1',
          name: 'Task Management System',
          description: 'A comprehensive task and project management application',
          status: 'active',
          tags: ['react', 'typescript', 'api'],
          created_at: '2024-01-01T00:00:00Z',
        },
      ];

      setTasks(mockTasks);
      setProjects(mockProjects);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const createTask = async () => {
    if (!newTaskTitle.trim()) return;

    const newTask = {
      id: Date.now().toString(),
      title: newTaskTitle,
      description: newTaskDescription,
      status: 'todo',
      priority: 'medium',
      project_id: selectedProject || '1',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };

    setTasks(prev => [...prev, newTask]);
    setNewTaskTitle('');
    setNewTaskDescription('');
  };

  const updateTaskStatus = async (taskId, status) => {
    setTasks(prev =>
      prev.map(task =>
        task.id === taskId
          ? { ...task, status, updated_at: new Date().toISOString() }
          : task
      )
    );
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'done': return '#10b981';
      case 'in_progress': return '#f59e0b';
      default: return '#6b7280';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#ef4444';
      case 'medium': return '#f59e0b';
      default: return '#10b981';
    }
  };

  if (loading) {
    return <div className="loading">Loading...</div>;
  }

  return (
    <div className="app">
      <header className="header">
        <h1>Task Management System</h1>
        <p>Organize your projects and tasks efficiently</p>
      </header>

      <div className="content">
        <div className="projects-section">
          <h2>Projects</h2>
          <div className="projects-grid">
            {projects.map(project => (
              <div key={project.id} className="project-card">
                <h3>{project.name}</h3>
                <p>{project.description}</p>
                <div className="project-tags">
                  {project.tags.map(tag => (
                    <span key={tag} className="tag">{tag}</span>
                  ))}
                </div>
                <span className={`status status-${project.status}`}>
                  {project.status}
                </span>
              </div>
            ))}
          </div>
        </div>

        <div className="tasks-section">
          <div className="tasks-header">
            <h2>Tasks</h2>
            <div className="task-form">
              <input
                type="text"
                placeholder="Task title"
                value={newTaskTitle}
                onChange={(e) => setNewTaskTitle(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && createTask()}
              />
              <textarea
                placeholder="Task description (optional)"
                value={newTaskDescription}
                onChange={(e) => setNewTaskDescription(e.target.value)}
                rows={2}
              />
              <button onClick={createTask}>Add Task</button>
            </div>
          </div>

          <div className="tasks-grid">
            {tasks.map(task => (
              <div key={task.id} className="task-card">
                <div className="task-header">
                  <h3>{task.title}</h3>
                  <span
                    className="priority-badge"
                    style={{ backgroundColor: getPriorityColor(task.priority) }}
                  >
                    {task.priority}
                  </span>
                </div>
                {task.description && (
                  <p className="task-description">{task.description}</p>
                )}
                <div className="task-footer">
                  <select
                    value={task.status}
                    onChange={(e) => updateTaskStatus(task.id, e.target.value)}
                    style={{ backgroundColor: getStatusColor(task.status) }}
                  >
                    <option value="todo">To Do</option>
                    <option value="in_progress">In Progress</option>
                    <option value="done">Done</option>
                  </select>
                  <span className="task-date">
                    {new Date(task.created_at).toLocaleDateString()}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;


# frontend/App.mjs
export const sampleGreeting = () => 'hello from mjs';


# frontend/App.mts
export const typedConstant: number = 42;


# frontend/App.ts
export const sum = (left: number, right: number): number => left + right;


# frontend/App.tsx
// Sample TypeScript React component used for CLI integration tests.
export const App = (): JSX.Element => {
  return <div>Sample TypeScript view</div>;
};


