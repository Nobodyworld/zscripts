# backend

# backend/__init__.py


# backend/models.py
"""Data models backing the sample project service layer."""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from uuid import uuid4


def _now() -> datetime:
    return datetime.now()


def _new_id() -> str:
    return str(uuid4())


@dataclass(slots=True)
class BaseModel:
    """Base model that tracks creation and modification timestamps."""

    id: str = field(init=False)
    created_at: datetime = field(init=False)
    updated_at: datetime = field(init=False)

    def __post_init__(self) -> None:
        # Ensure created and updated timestamps start aligned for determinism in tests.
        now = _now()
        self.id = _new_id()
        self.created_at = now
        self.updated_at = now

    def touch(self) -> None:
        """Update the ``updated_at`` timestamp to ``now``."""

        self.updated_at = _now()


@dataclass(slots=True)
class User(BaseModel):
    """User model representing system users."""

    username: str
    email: str
    is_active: bool = True
    role: str = "user"


@dataclass(slots=True)
class Project(BaseModel):
    """Project model for organising tasks."""

    name: str
    description: str | None = None
    owner_id: str = ""
    status: str = "active"
    tags: list[str] = field(default_factory=list)

    def add_tag(self, tag: str) -> None:
        """Attach *tag* to the project if not already present."""

        if tag not in self.tags:
            self.tags.append(tag)
            self.touch()


@dataclass(slots=True)
class Task(BaseModel):
    """Task model with project relationships."""

    title: str
    description: str | None = None
    project_id: str = ""
    assignee_id: str | None = None
    status: str = "todo"
    priority: str = "medium"
    due_date: datetime | None = None

    def mark_complete(self) -> None:
        """Mark the task as completed."""

        self.status = "done"
        self.touch()

    def assign_to(self, user_id: str) -> None:
        """Assign task to a user and refresh timestamps."""

        self.assignee_id = user_id
        self.touch()


# backend/service.py
"""Service layer for task and project management."""

from __future__ import annotations

from dataclasses import dataclass, field

from .models import Project, Task, User


@dataclass(slots=True)
class TaskService:
    """Service for managing tasks and projects."""

    tasks: dict[str, Task] = field(default_factory=dict)
    projects: dict[str, Project] = field(default_factory=dict)
    users: dict[str, User] = field(default_factory=dict)

    def create_task(
        self,
        title: str,
        description: str | None = None,
        project_id: str = "",
        priority: str = "medium",
    ) -> Task:
        """Create a new task."""
        task = Task(
            title=title,
            description=description or "",
            project_id=project_id,
            priority=priority,
        )
        self.tasks[task.id] = task
        return task

    def get_task(self, task_id: str) -> Task | None:
        """Get a task by ID."""
        return self.tasks.get(task_id)

    def list_tasks(self) -> list[Task]:
        """List all tasks."""
        return list(self.tasks.values())

    def assign_task(self, task_id: str, user_id: str) -> bool:
        """Assign a task to a user."""
        task = self.get_task(task_id)
        if task is None:
            return False
        task.assign_to(user_id)
        return True

    def mark_task_complete(self, task_id: str) -> Task | None:
        """Mark a task as complete."""
        task = self.get_task(task_id)
        if task:
            task.mark_complete()
        return task

    def create_project(self, name: str, description: str | None = None) -> Project:
        """Create a new project."""
        project = Project(name=name, description=description or "")
        self.projects[project.id] = project
        return project

    def get_project(self, project_id: str) -> Project | None:
        """Get a project by ID."""
        return self.projects.get(project_id)

    def list_projects(self) -> list[Project]:
        """List all projects."""
        return list(self.projects.values())

    def add_user(self, username: str, email: str) -> User:
        """Add a new user."""
        user = User(username=username, email=email)
        self.users[user.id] = user
        return user

    def get_user(self, user_id: str) -> User | None:
        """Get a user by ID."""
        return self.users.get(user_id)


# backend/views.py
"""Django-style views for the sample project API."""

from __future__ import annotations

from collections.abc import Mapping
from typing import cast

from .service import TaskService


class TaskView:
    """REST-style view for task operations."""

    def __init__(self, service: TaskService):
        self.service = service

    def get_tasks(self, project_id: str | None = None) -> list[dict[str, object]]:
        """Get all tasks, optionally filtered by project."""
        tasks = self.service.list_tasks()
        if project_id:
            tasks = [t for t in tasks if t.project_id == project_id]

        result: list[dict[str, object]] = []
        for task in tasks:
            result.append(
                {
                    "id": task.id,
                    "title": task.title,
                    "description": task.description,
                    "status": task.status,
                    "priority": task.priority,
                    "assignee_id": task.assignee_id,
                    "project_id": task.project_id,
                    "created_at": task.created_at.isoformat(),
                    "updated_at": task.updated_at.isoformat(),
                }
            )
        return result

    def create_task(self, data: Mapping[str, object]) -> dict[str, object]:
        """Create a new task from request data."""
        task = self.service.create_task(
            title=cast(str, data["title"]),
            description=cast(str | None, data.get("description")),
            project_id=cast(str, data.get("project_id", "")),
            priority=cast(str, data.get("priority", "medium")),
        )

        assignee_value = data.get("assignee_id")
        if assignee_value is not None:
            assignee_id = cast(str, assignee_value)
            self.service.assign_task(task.id, assignee_id)

        return {
            "id": task.id,
            "title": task.title,
            "status": task.status,
            "created_at": task.created_at.isoformat(),
        }

    def update_task_status(self, task_id: str, status: str) -> dict[str, object]:
        """Update a task's status."""
        if status == "done":
            task = self.service.mark_task_complete(task_id)
        else:
            task = self.service.get_task(task_id)
            if task:
                task.status = status
                task.updated_at = task.created_at  # Simplified

        return {"id": task.id, "status": task.status} if task else {}


class ProjectView:
    """View for project operations."""

    def __init__(self, service: TaskService):
        self.service = service

    def get_projects(self) -> list[dict[str, object]]:
        """Get all projects."""
        projects = self.service.list_projects()
        result: list[dict[str, object]] = []
        for project in projects:
            result.append(
                {
                    "id": project.id,
                    "name": project.name,
                    "description": project.description,
                    "status": project.status,
                    "tags": list(project.tags),
                    "created_at": project.created_at.isoformat(),
                }
            )
        return result

    def create_project(self, data: Mapping[str, object]) -> dict[str, object]:
        """Create a new project."""
        project = self.service.create_project(
            name=cast(str, data["name"]),
            description=cast(str | None, data.get("description")),
        )

        return {
            "id": project.id,
            "name": project.name,
            "status": project.status,
        }


